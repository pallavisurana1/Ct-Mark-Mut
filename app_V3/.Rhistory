# function
count_ES_events <- function(df) {
# Filter only 'exon' rows
df_exons <- df %>% filter(status == 'exon')
# Filter only 'intron' rows
df_introns <- df %>% filter(status == 'intron')
# Count occurrences of each exon across different transcripts for each gene
exon_counts <- df_exons %>%
group_by(ensembl_gene_id, start, end) %>%
summarise(transcripts = list(unique(transcript)), .groups = 'drop') %>%
rowwise() %>%
mutate(n_transcripts = length(transcripts)) %>%
filter(n_transcripts == 1)
# Check if these exons are part of any intron
unique_exons <- left_join(exon_counts, df_introns, by = c('ensembl_gene_id', 'start', 'end')) %>%
filter(is.na(seqnames)) %>%
group_by(ensembl_gene_id) %>%
summarise(ES_count = n(), .groups = 'drop')
return(unique_exons)
}
# Usage:
es_df <- count_ES_events(data_in_use_filt) %>% distinct
filter_and_adorn(es_df$ES_count)
data_in_use = single_prom
# preprocess
data_in_use <- combined_df_final %>%
filter(transcript %in% data_in_use$transcript) %>%
subset(select = c(transcript, ensembl_gene_id, tissue, seqnames, start,
end, strand.y, status)) %>% distinct
data_in_use_filt <- data_in_use %>%
group_by(ensembl_gene_id) %>%
filter(n_distinct(transcript) > 1) %>%  # Filter genes with more than one unique transcript
ungroup()
# function
count_ES_events <- function(df) {
# Filter only 'exon' rows
df_exons <- df %>% filter(status == 'exon')
# Filter only 'intron' rows
df_introns <- df %>% filter(status == 'intron')
# Count occurrences of each exon across different transcripts for each gene
exon_counts <- df_exons %>%
group_by(ensembl_gene_id, start, end) %>%
summarise(transcripts = list(unique(transcript)), .groups = 'drop') %>%
rowwise() %>%
mutate(n_transcripts = length(transcripts)) %>%
filter(n_transcripts == 1)
# Check if these exons are part of any intron
unique_exons <- left_join(exon_counts, df_introns, by = c('ensembl_gene_id', 'start', 'end')) %>%
filter(is.na(seqnames)) %>%
group_by(ensembl_gene_id) %>%
summarise(ES_count = n(), .groups = 'drop')
return(unique_exons)
}
# Usage:
es_df <- count_ES_events(data_in_use_filt) %>% distinct
filter_and_adorn(es_df$ES_count)
single_es1 = data_in_use %>%
left_join(es_df, by = c("ensembl_gene_id")) %>%
mutate_at(c('AFE_count'), ~replace_na(.,0))
single_es1 = data_in_use %>%
left_join(es_df, by = c("ensembl_gene_id")) %>%
mutate_at(c('ES_count'), ~replace_na(.,0))
write.csv(single_es1,  paste0(res_path, "12a_alternative_TC/Tsptrans/single_promoter/2_ES.csv"))
View(single_es1)
# make plot
library(ggtranscript)
install.packages("ggtranscript")
# make plot
library(ggtranscript)
# check with exon intron diagram
exampledf = single_es1[single_es1$ensembl_gene_id == "ENSG00000139436", ]
# make plot
# Filter out exons and introns
exons <- exampledf %>% dplyr::filter(status == "exon")
introns <- exampledf %>% dplyr::filter(status == "intron")
# Plotting
ggplot() +
geom_rect(data = exons, aes(
xmin = start,
xmax = end,
ymin = as.numeric(factor(transcript)) - 0.4,
ymax = as.numeric(factor(transcript)) + 0.4,
fill = status
)) +
geom_segment(data = introns, aes(
x = start,
xend = end,
y = as.numeric(factor(transcript)),
yend = as.numeric(factor(transcript))
)) +
scale_y_discrete(name = "Transcripts") +
scale_x_continuous(name = "Genomic Coordinates") +
ggtitle(paste("Gene ID:", unique(exampledf$ensembl_gene_id))) +
theme_minimal()
# check with exon intron diagram
exampledf = single_es1[single_es1$ensembl_gene_id == "ENSG00000139220", ]
# make plot
# Filter out exons and introns
exons <- exampledf %>% dplyr::filter(status == "exon")
introns <- exampledf %>% dplyr::filter(status == "intron")
# Plotting
ggplot() +
geom_rect(data = exons, aes(
xmin = start,
xmax = end,
ymin = as.numeric(factor(transcript)) - 0.4,
ymax = as.numeric(factor(transcript)) + 0.4,
fill = status
)) +
geom_segment(data = introns, aes(
x = start,
xend = end,
y = as.numeric(factor(transcript)),
yend = as.numeric(factor(transcript))
)) +
scale_y_discrete(name = "Transcripts") +
scale_x_continuous(name = "Genomic Coordinates") +
ggtitle(paste("Gene ID:", unique(exampledf$ensembl_gene_id))) +
theme_minimal()
res_path = "Z:/projects/Davuluri_lab/2_Tissue-specific-July-2022/clustering/2023/"
percentages=c(25,30,35,40)
perc=25
folder = "blood"
clust_num = 2
specific_path <- paste0(res_path, "res/consensus/", folder, "/results_", perc, "_percent")
res = readRDS(paste0(specific_path, "/hc_k_2_10.rds"))
View(res)
rownames(res$group)
colnames(res$group)
sil_obj = res$originalResult[[clust_num]]
sil_df = silhouette_SimilarityMatrix(sil_obj$consensusClass, sil_obj$consensusMatrix)
library(CancerSubtypes)
library(cluster)
library(factoextra)
install.apcakges(factorextra)
install.packages("factoextra")
install.packages("factoextra")
# Loading necessary libraries
library(cluster)
library(factoextra)
# Generate example data: two clusters
set.seed(123)
data <- rbind(matrix(rnorm(100, mean = 0, sd = 0.3), ncol = 2),
matrix(rnorm(100, mean = 1, sd = 0.3), ncol = 2))
# Compute distance matrix
diss <- dist(data)
# Compute clustering
fit <- hclust(diss)
cluster_assignment <- cutree(fit, k = 2)
sil <- silhouette(cluster_assignment, diss)
plot <- fviz_silhouette(sil)
print(plot)
plot <- fviz_silhouette(sil)
# Extract the silhouette statistics
avg_sil_width <- summary(sil)$avg.width
cluster_avg_widths <- summary(sil)$clus.avg.widths
# Annotate the plot
annotated_plot <- plot +
geom_text(aes(x = 1.5, y = -1, label = paste0("Overall avg silhouette: ", round(avg_sil_width, 2))),
hjust = 0, size = 3, color = "red") +
geom_text(aes(x = 1.5, y = -2, label = paste0("Cluster 1 avg silhouette: ", round(cluster_avg_widths[1], 2))),
hjust = 0, size = 3, color = "blue") +
geom_text(aes(x = 1.5, y = -3, label = paste0("Cluster 2 avg silhouette: ", round(cluster_avg_widths[2], 2))),
hjust = 0, size = 3, color = "blue")
# Print the annotated plot
print(annotated_plot)
plot <- fviz_silhouette(sil)
# Extract the silhouette statistics
avg_sil_width <- summary(sil)$avg.width
cluster_avg_widths <- summary(sil)$clus.avg.widths
# Create a data frame for the table
table_data <- data.frame(
Metric = c("Overall avg silhouette", "Cluster 1 avg silhouette", "Cluster 2 avg silhouette"),
Value = c(avg_sil_width, cluster_avg_widths[1], cluster_avg_widths[2])
)
# Generate the table graphic
table_graphic <- tableGrob(table_data, rows = NULL)
gridExtra::tableGrob()
# Generate the table graphic
table_graphic <- gridExtra::tableGrob(table_data, rows = NULL)
# Combine the plot and table
grid.arrange(plot, table_graphic, ncol = 2)
# Combine the plot and table
gridExtra::grid.arrange(plot, table_graphic, ncol = 2)
table_data
# Load Required Packages
pacman::p_load(NMF, gplots, ggplot2, gridExtra, diceR, CancerSubtypes, cluster, e1071, dplyr, openxlsx, tidyr, tidyverse, janitor, factoextra)
ft = "Z:/"
data_path = paste0(ft, "data/tcga/Isoform_count/")
res_path = paste0(ft, "projects/Davuluri_lab/2_Tissue-specific-July-2022/clustering/2023/")
perc = 25
folder = "solid"
data <- read.xlsx(paste0(res_path, "res/consensus/", folder, "/results_", perc, "_percent/hc/sil_sample_results.xlsx"),
sheet = "clust_25")
table1 <- table(data$cluster, data$X_gender)
table2 <- table(data$cluster, data$X_primary_site)
table3 <- table(data$cluster, data$detailed_category)
table2
sum(data$sil_width< 0)
a1 = cbind(table1, table2)
a2 = cbind(table1, table3)
a = list(a1, a2)
a <- lapply(a, function(df) {
df = df %>% as.data.frame()
df$cluster <- 1:nrow(df)
df <- df %>%
dplyr::select(-c("V1", "V4"))
df = df %>% relocate(cluster) %>%
mutate(sum_across = rowSums(select(df, -c("Male", "Female", "cluster"))))
return(df)
})
names(a) = c("site", "cancer")
# analyze
a$cancer -> to_analyze
View(to_analyze)
pheno = read.csv(paste0(res_path, "pheno/pheno_TCGA.csv"))
pheno = pheno %>% dplyr::filter(X_study == "TCGA")
pheno$sample <- gsub("-", ".", pheno$sample)
pheno = pheno %>% dplyr::select(sample, X_primary_site, detailed_category, X_gender, X_sample_type)
View(pheno)
pheno$sample %>% unique %>% length
1/100
0.01*10530
library(formattable)
install.packages("formattable")
# analyze
library(formattable)
exclude_columns <- c("cluster", "Male", "Female") #excluse
columns_to_format <- setdiff(names(df), exclude_columns)
columns_to_format
columns_to_format <- setdiff(colnames(to_analyze), exclude_columns)
columns_to_format
exclude_columns <- c("cluster", "Male", "Female", "sum_across")
columns_to_format <- setdiff(colnames(to_analyze), exclude_columns)
# Create the formatting list dynamically
format_list <- lapply(columns_to_format, function(col) {
highlight_values(df[[col]])
})
highlight_values <- formatter("span",
style = x ~ ifelse(x >= 10, style(color = "white", background = "orange"), NA)
)
# Create the formatting list dynamically
format_list <- lapply(columns_to_format, function(col) {
highlight_values(df[[col]])
})
# Create the formatting list dynamically
format_list <- lapply(columns_to_format, function(col) {
highlight_values(to_analyze[[col]])
})
names(format_list) <- columns_to_format
# Apply the formatting
formattable(to_analyze, format_list)
exclude_columns <- c("cluster", "Male", "Female")
# Custom formatter
highlight_values <- formatter("span",
style = x ~ ifelse(x >= 10, style(color = "white", background = "orange"), NA)
)
# Columns to exclude from formatting
exclude_columns <- c("cluster", "Male", "Female")
# Columns to exclude from formatting
exclude_columns <- c("cluster", "Male", "Female")
# Identify the columns to format
columns_to_format <- setdiff(names(to_analyze), exclude_columns)
# Create the formatting list dynamically
format_list <- setNames(lapply(columns_to_format, function(col) highlight_values), columns_to_format)
# Apply the formatting
formattable(to_analyze, format_list)
# Custom formatter
highlight_values <- formatter("span",
style = x ~ ifelse(x >= 10, style(color = "black", background = "lightpink"), NA)
)
# Columns to exclude from formatting
exclude_columns <- c("cluster", "Male", "Female")
# Identify the columns to format
columns_to_format <- setdiff(names(to_analyze), exclude_columns)
# Create the formatting list dynamically
format_list <- setNames(lapply(columns_to_format, function(col) highlight_values), columns_to_format)
# Apply the formatting
formattable(to_analyze, format_list)
install.packages("widgetframe")
formatted_table <- formattable(to_analyze, format_list)
frameableWidget(formatted_table, height = "500px")
library(widgetframe)
frameableWidget(formatted_table, height = "500px")
frameableWidget(formatted_table)
View(format_list)
View(formatted_table)
formattable(to_analyze, format_list)
install.packages(c("htmlwidgets", "widgetframe"))
install.packages(c("htmlwidgets", "widgetframe"))
library(htmlwidgets)
formatted_widget <- as.htmlwidget(formattable(to_analyze, format_list))
frameableWidget(formatted_widget)
View(pheno)
pheno$X_sample_type %>% table
pheno$detailed_category %>% unique %>% length
pheno$X_primary_site %>% unique %>% length
xd = c("AGTGAA GTGAAA TGAAAT GAAATT AAATTG AATTGC ATTGCT TTGCTT TGCTTT GCTTTT CTTTTA TTTTAA TTTAAC TTAACT TAACTT AACTTC ACTTCA CTTCAT TTCATC TCATCC CATCCC ATCCCA TCCCAC CCCACT CCACTT CACTTG ACTTGT CTTGTG TTGTGA TGTGAT GTGATG TGATGC GATGCA ATGCAG TGCAGC GCAGCT CAGCTC AGCTCC GCTCCC CTCCCC TCCCCT CCCCTT CCCTTT CCTTTT CTTTTC TTTTCC TTTCCA TTCCAA TCCAAT CCAATC CAATCC AATCCC ATCCCT TCCCTC CCCTCT CCTCTG CTCTGG TCTGGG CTGGGA TGGGAG GGGAGT GGAGTT GAGTTA AGTTAT GTTATT TTATTG TATTGG ATTGGT TTGGTA TGGTAT GGTATC GTATCT TATCTT ATCTTA TCTTAA CTTAAC TTAACT TAACTT AACTTT ACTTTT CTTTTT TTTTTT TTTTTT TTTTTT TTTTTA TTTTAG TTTAGT TTAGTT TAGTTC AGTTCC GTTCCC TTCCCT TCCCTC CCCTCT CCTCTG CTCTGG TCTGGC CTGGCT TGGCTT GGCTTT GCTTTG CTTTGA TTTGAG TTGAGC TGAGCT GAGCTC AGCTCC GCTCCT CTCCTG TCCTGC CCTGCA CTGCAT TGCATC GCATCT CATCTG ATCTGT TCTGTA CTGTAG TGTAGC GTAGCA TAGCAT AGCATT GCATTA CATTAG ATTAGG TTAGGA TAGGAG AGGAGG GGAGGG GAGGGT AGGGTT GGGTTT GGTTTG GTTTGT TTTGTG TTGTGA TGTGAG GTGAGT TGAGTT GAGTTG AGTTGC GTTGCT TTGCTT TGCTTT GCTTTG CTTTGG TTTGGC TTGGCA TGGCAT GGCATC GCATCT CATCTC ATCTCA TCTCAG CTCAGA TCAGAA CAGAAA AGAAAT GAAATG AAATGC AATGCT ATGCTG TGCTGC GCTGCC CTGCCT TGCCTG GCCTGT CCTGTA CTGTAC TGTACT GTACTC TACTCT ACTCTC CTCTCT TCTCTA CTCTAG TCTAGC CTAGCA TAGCAT AGCATG GCATGG CATGGA ATGGAA TGGAAC GGAACT GAACTG AACTGC ACTGCA CTGCAG TGCAGA GCAGAC CAGACA AGACAC GACACT ACACTT CACTTC ACTTCT CTTCTT TTCTTG TCTTGA CTTGAT TTGATT TGATTT GATTTC ATTTCT TTTCTC TTCTCC TCTCCC CTCCCC TCCCCA CCCCAA CCCAAG CCAAGC CAAGCA AAGCAT AGCATT GCATTA CATTAC ATTACC TTACCA TACCAA ACCAAT CCAATA CAATAT AATATG ATATGA TATGAG ATGAGT TGAGTT GAGTTG AGTTGT GTTGTG TTGTGT TGTGTG GTGTGT TGTGTA GTGTAT TGTATG GTATGG TATGGC ATGGCT TGGCTA GGCTAG GCTAGC CTAGCA TAGCAC AGCACA GCACAG CACAGT ACAGTT CAGTTC AGTTCA GTTCAG TTCAGT TCAGTG CAGTGA AGTGAA GTGAAG TGAAGA GAAGAT AAGATA AGATAT GATATG ATATGG TATGGG ATGGGG TGGGGT GGGGTC GGGTCA GGTCAA GTCAAG TCAAGC CAAGCT AAGCTA AGCTAT GCTATG CTATGG TATGGG ATGGGC TGGGCT GGGCTT GGCTTT GCTTTA CTTTAT TTTATA TTATAT TATATT ATATTA TATTAG ATTAGC TTAGCC TAGCCT AGCCTG GCCTGT CCTGTG CTGTGG TGTGGT GTGGTT TGGTTT GGTTTG GTTTGG TTTGGC TTGGCC TGGCCT GGCCTC GCCTCA CCTCAT CTCATC TCATCT CATCTC ATCTCC TCTCCC CTCCCT TCCCTC CCCTCA CCTCAG CTCAGG TCAGGC CAGGCT AGGCTC GGCTCC GCTCCA CTCCAT TCCATG CCATGC CATGCA ATGCAA TGCAAA GCAAAC CAAACG AAACGT AACGTT ACGTTC CGTTCA GTTCAA TTCAAT TCAATT CAATTT AATTTC ATTTCA TTTCAC TTCACT TCACTC CACTCC ACTCCT CTCCTG TCCTGT CCTGTA CTGTAT TGTATT GTATTA TATTAT ATTATG TTATGT TATGTG ATGTGG TGTGGA GTGGAG TGGAGC GGAGCG GAGCGC AGCGCT GCGCTT CGCTTT GCTTTT CTTTTG TTTTGC TTTGCT TTGCTC TGCTCT GCTCTC CTCTCT TCTCTG CTCTGA TCTGAA CTGAAA TGAAAC GAAACC AAACCT AACCTA ACCTAT CCTATT CTATTC TATTCA ATTCAA TTCAAT TCAATA CAATAA AATAAC ATAACT TAACTG AACTGG ACTGGC CTGGCC TGGCCT GGCCTT GCCTTG CCTTGT CTTGTT TTGTTT TGTTTG GTTTGC TTTGCC TTGCCT TGCCTC GCCTCT CCTCTT CTCTTC TCTTCA CTTCAA TTCAAA TCAAAG CAAAGA AAAGAT AAGATG AGATGC GATGCT ATGCTT TGCTTT GCTTTA CTTTAT TTTATT TTATTA TATTAT ATTATG TTATGT TATGTT ATGTTT TGTTTT GTTTTT TTTTTT TTTTTA TTTTAA TTTAAA TTAAAT TAAATT AAATTC AATTCA ATTCAC TTCACT TCACTC CACTCT ACTCTC CTCTCT TCTCTC CTCTCC TCTCCC CTCCCT TCCCTT CCCTTC CCTTCT CTTCTC TTCTCA TCTCAC CTCACC TCACCT CACCTC ACCTCT CCTCTG CTCTGT TCTGTA CTGTAC TGTACC GTACCT TACCTT ACCTTT CCTTTG CTTTGC TTTGCA TTGCAA TGCAAG GCAAGC CAAGCA AAGCAG AGCAGT GCAGTT CAGTTG AGTTGC GTTGCT TTGCTT TGCTTC GCTTCT CTTCTG TTCTGC TCTGCC CTGCCT TGCCTG GCCTGG CCTGGA CTGGAA TGGAAT GGAATA GAATAT AATATC ATATCC TATCCT ATCCTT TCCTTT CCTTTC CTTTCC TTTCCA TTCCAG TCCAGA CCAGAA CAGAAT AGAATG GAATGG AATGGA ATGGAA TGGAAG GGAAGA GAAGAT AAGATT AGATTT GATTTG ATTTGG TTTGGT TTGGTA TGGTAG GGTAGA GTAGAG TAGAGG AGAGGT GAGGTT AGGTTG GGTTGG GTTGGG TTGGGA TGGGAA GGGAAA GGAAAT GAAATG AAATGT AATGTC ATGTCA TGTCAG GTCAGT TCAGTC CAGTCT AGTCTT GTCTTT TCTTTC CTTTCC TTTCCC TTCCCC TCCCCT CCCCTC CCCTCA CCTCAC CTCACT TCACTT CACTTT ACTTTA CTTTAT TTTATC TTATCT TATCTC ATCTCA TCTCAC CTCACA TCACAT CACATC ACATCA CATCAT ATCATT TCATTC CATTCT ATTCTC TTCTCT TCTCTG CTCTGT TCTGTA CTGTAA TGTAAG GTAAGT TAAGTA AAGTAG AGTAGA GTAGAA TAGAAG AGAAGG GAAGGA AAGGAA AGGAAA GGAAAT GAAATG AAATGG AATGGT ATGGTG TGGTGA GGTGAC GTGACA TGACAA GACAAT ACAATA CAATAT AATATT ATATTT TATTTA ATTTAT TTTATT TTATTT TATTTC ATTTCT TTTCTC TTCTCT TCTCTA CTCTAC TCTACT CTACTA TACTAG ACTAGT CTAGTA TAGTAT AGTATT GTATTA TATTAA ATTAAT TTAATT TAATTA AATTAT ATTATG TTATGA TATGAC ATGACA TGACAT GACATC ACATCA CATCAC ATCACA TCACAA CACAAA ACAAAC CAAACA AAACAT AACATC ACATCT CATCTC ATCTCG TCTCGG CTCGGC TCGGCT CGGCTC GGCTCC GCTCCT CTCCTG TCCTGA CCTGAG CTGAGG TGAGGT GAGGTG AGGTGG GGTGGC GTGGCC TGGCCA GGCCAT GCCATA CCATAG CATAGT ATAGTT TAGTTG AGTTGG GTTGGT TTGGTC TGGTCT GGTCTT GTCTTT TCTTTA CTTTAA TTTAAA TTAAAT TAAATA AAATAA AATAAC ATAACA TAACAC AACACT ACACTT CACTTT ACTTTT CTTTTT TTTTTG TTTTGG TTTGGT TTGGTA TGGTAT GGTATT GTATTC TATTCC ATTCCA TTCCAC TCCACA CCACAA CACAAA ACAAAC CAAACT AAACTT AACTTC ACTTCT CTTCTG TTCTGG TCTGGA CTGGAA TGGAAA GGAAAA GAAAAT AAAATA AAATAT AATATT ATATTT TATTTA ATTTAC TTTACT TTACTT TACTTG ACTTGG CTTGGG TTGGGT TGGGTT GGGTTT GGTTTG GTTTGC TTTGCT TTGCTA TGCTAA GCTAAA CTAAAG TAAAGT AAAGTC AAGTCA AGTCAT GTCATA TCATAT CATATA ATATAA TATAAA ATAAAT TAAATT AAATTG AATTGA ATTGAC TTGACC TGACCA GACCAG ACCAGA CCAGAA CAGAAG AGAAGA GAAGAG AAGAGG AGAGGC GAGGCA AGGCAG GGCAGC GCAGCC CAGCCC AGCCCT GCCCTA CCCTAC CCTACC CTACCC TACCCC ACCCCT CCCCTG CCCTGC CCTGCC CTGCCC TGCCCC GCCCCT CCCCTC CCCTCC CCTCCT CTCCTC TCCTCT CCTCTC CTCTCC TCTCCT CTCCTT TCCTTC CCTTCC CTTCCT TTCCTC TCCTCC CCTCCT CTCCTA TCCTAC CCTACC CTACCC TACCCT ACCCTT CCCTTC CCTTCC CTTCCT TTCCTA TCCTAC CCTACC CTACCT TACCTT ACCTTA CCTTAG CTTAGA TTAGAG TAGAGG AGAGGG GAGGGC AGGGCT GGGCTC GGCTCC GCTCCC CTCCCG TCCCGC CCCGCT CCGCTT CGCTTC GCTTCT CTTCTT TTCTTC TCTTCG CTTCGA TTCGAA TCGAAG CGAAGC GAAGCC AAGCCA AGCCAG GCCAGA CCAGAC CAGACA AGACAA GACAAC ACAACT CAACTT AACTTT ACTTTG CTTTGT TTTGTC TTGTCT TGTCTG GTCTGG TCTGGA CTGGAC TGGACC GGACCT GACCTC ACCTCT CCTCTC CTCTCC TCTCCT CTCCTA TCCTAT CCTATG CTATGG TATGGG ATGGGC TGGGCT GGGCTT GGCTTG GCTTGT CTTGTA TTGTAT TGTATT GTATTA TATTAT ATTATG TTATGG TATGGA ATGGAT TGGATA GGATAT GATATT ATATTT TATTTG ATTTGT TTTGTT TTGTTT TGTTTA GTTTAT TTTATA TTATAA TATAAA ATAAAT TAAATC AAATCA AATCAT ATCATA TCATAC CATACC ATACCA TACCAC ACCACC CCACCT CACCTT ACCTTT CCTTTA CTTTAC TTTACT TTACTG TACTGA ACTGAA CTGAAC TGAACT GAACTG AACTGT ACTGTG CTGTGA TGTGAA GTGAAC TGAACT GAACTC AACTCT ACTCTG CTCTGC TCTGCA CTGCAA TGCAAA GCAAAG CAAAGA AAAGAT AAGATG AGATGA GATGAT ATGATG TGATGT GATGTC ATGTCA TGTCAT GTCATC TCATCT CATCTT ATCTTC TCTTCC CTTCCC TTCCCT TCCCTC CCCTCT CCTCTC CTCTCT TCTCTG CTCTGA TCTGAA CTGAAA TGAAAC GAAACT AAACTT AACTTC ACTTCA CTTCAG TTCAGT TCAGTG CAGTGC AGTGCA GTGCAG TGCAGC GCAGCT CAGCTC AGCTCG GCTCGG CTCGGT TCGGTA CGGTAT GGTATC GTATCT TATCTG ATCTGA TCTGAT CTGATA TGATAC GATACA ATACAG TACAGA ACAGAA CAGAAT AGAATT GAATTG AATTGA ATTGAC TTGACT TGACTT GACTTT ACTTTG CTTTGA TTTGAA TTGAAT TGAATC GAATCA AATCAC ATCACC TCACCT CACCTG ACCTGA CCTGAT CTGATT TGATTT GATTTC ATTTCT TTTCTA TTCTAA TCTAAC CTAACT TAACTG AACTGA ACTGAG CTGAGG TGAGGA GAGGAT AGGATA GGATAA GATAAA ATAAAT TAAATG AAATGA AATGAA ATGAAT TGAATA GAATAA AATAAA ATAAAT TAAATG AAATGT AATGTG ATGTGA TGTGAA GTGAAG TGAAGT GAAGTT AAGTTG AGTTGC GTTGCA TTGCAG TGCAGA GCAGAT CAGATG AGATGG GATGGC ATGGCC TGGCCC GGCCCC GCCCCT CCCCTT CCCTTA CCTTAG CTTAGT TTAGTG TAGTGA AGTGAT GTGATC TGATCT GATCTG ATCTGA TCTGAA CTGAAT TGAATA GAATAG AATAGG ATAGGC TAGGCT AGGCTG GGCTGC GCTGCT CTGCTA TGCTAG GCTAGG CTAGGG TAGGGG AGGGGA GGGGAA GGGAAG GGAAGA GAAGAG AAGAGC AGAGCA GAGCAT AGCATA GCATAT CATATG ATATGG TATGGT ATGGTA TGGTAT GGTATC GTATCC TATCCC ATCCCC TCCCCA CCCCAC CCCACT CCACTT CACTTC ACTTCC CTTCCC TTCCCA TCCCAC CCCACT CCACTT CACTTG ACTTGT CTTGTA TTGTAC TGTACT GTACTG TACTGA ACTGAC CTGACT TGACTG GACTGT ACTGTC CTGTCA TGTCAG GTCAGG TCAGGT CAGGTG AGGTGC GGTGCT GTGCTG TGCTGT GCTGTT CTGTTA TGTTAG GTTAGA TTAGAA TAGAAT AGAATC GAATCA AATCAA ATCAAT TCAATA CAATAG AATAGG ATAGGC TAGGCA AGGCAA GGCAAC GCAACT CAACTA AACTAT ACTATT CTATTT TATTTC ATTTCT TTTCTT TTCTTT TCTTTT CTTTTC TTTTCT TTTCTT TTCTTT TCTTTT CTTTTT TTTTTC TTTTCT TTTCTT TTCTTT TCTTTC CTTTCT TTTCTT TTCTTT TCTTTC CTTTCT TTTCTT TTCTTT TCTTTC CTTTCT TTTCTT TTCTTT TCTTTT CTTTTT TTTTTT TTTTTT TTTTTT TTTTTG TTTTGA TTTGAG TTGAGA TGAGAC GAGACA AGACAG GACAGT ACAGTG CAGTGT AGTGTC GTGTCT TGTCTC GTCTCT TCTCTC CTCTCT TCTCTC CTCTCT TCTCTG CTCTGT TCTGTC CTGTCA TGTCAC GTCACC TCACCC CACCCA ACCCAG CCCAGG CCAGGC CAGGCT AGGCTG GGCTGG GCTGGA CTGGAG TGGAGT GGAGTA GAGTAC AGTACA GTACAG TACAGT ACAGTG CAGTGG AGTGGT GTGGTG TGGTGC GGTGCA GTGCAA TGCAAT GCAATC CAATCT AATCTG ATCTGG TCTGGG CTGGGC TGGGCT GGGCTC GGCTCA GCTCAC CTCACT TCACTG CACTGC ACTGCA CTGCAA TGCAAC GCAACC CAACCT AACCTC ACCTCT CCTCTG CTCTGT TCTGTC CTGTCT TGTCTC GTCTCC TCTCCC CTCCCG TCCCGG CCCGGG CCGGGT CGGGTT GGGTTC GGTTCA GTTCAA TTCAAG TCAAGC CAAGCG AAGCGA AGCGAC GCGACT CGACTC GACTCT ACTCTC CTCTCA TCTCAT CTCATG TCATGC CATGCC ATGCCT TGCCTC GCCTCA CCTCAG CTCAGC TCAGCC CAGCCT AGCCTC GCCTCC CCTCCC CTCCCA TCCCAA CCCAAA CCAAAT CAAATA AAATAG AATAGC ATAGCT TAGCTG AGCTGG GCTGGG CTGGGA TGGGAT GGGATT GGATTA GATTAC ATTACA TTACAG TACAGG ACAGGT CAGGTG AGGTGT GGTGTG GTGTGC TGTGCA GTGCAC TGCACC GCACCA CACCAC ACCACC CCACCA CACCAC ACCACG CCACGT CACGTC ACGTCT CGTCTA GTCTAG TCTAGC CTAGCT TAGCTA AGCTAA GCTAAT CTAATT TAATTT AATTTT ATTTTT TTTTTG TTTTGT TTTGTA TTGTAT TGTATT GTATTT TATTTT ATTTTT TTTTTA TTTTAG TTTAGT TTAGTG TAGTGG AGTGGA GTGGAG TGGAGA GGAGAC GAGACG AGACGG GACGGG ACGGGG CGGGGA GGGGAT GGGATT GGATTC GATTCA ATTCAC TTCACC TCACCA CACCAT ACCATG CCATGT CATGTT ATGTTG TGTTGG GTTGGC TTGGCC TGGCCA GGCCAG GCCAGG CCAGGC CAGGCT AGGCTG GGCTGG GCTGGT CTGGTC TGGTCT GGTCTC GTCTCG TCTCGA CTCGAA TCGAAC CGAACT GAACTC AACTCC ACTCCT CTCCTG TCCTGG CCTGGG CTGGGC TGGGCT GGGCTC GGCTCA GCTCAA CTCAAG TCAAGT CAAGTG AAGTGA AGTGAT GTGATC TGATCC GATCCG ATCCGC TCCGCC CCGCCC CGCCCG GCCCGC CCCGCC CCGCCT CGCCTC GCCTCA CCTCAG CTCAGC TCAGCC CAGCCT AGCCTC GCCTCC CCTCCC CTCCCA TCCCAA CCCAAA CCAAAG CAAAGT AAAGTG AAGTGC AGTGCT GTGCTG TGCTGG GCTGGG CTGGGA TGGGAT GGGATT GGATTA GATTAC ATTACA TTACAG TACAGG ACAGGC CAGGCG AGGCGT GGCGTG GCGTGA CGTGAG GTGAGC TGAGCC GAGCCA AGCCAC GCCACC CCACCG CACCGT ACCGTG CCGTGC CGTGCC GTGCCC TGCCCG GCCCGG CCCGGC CCGGCC CGGCCA GGCCAG GCCAGC CCAGCA CAGCAA AGCAAT GCAATT CAATTA AATTAT ATTATT TTATTT TATTTC ATTTCT TTTCTT TTCTTT TCTTTA CTTTAT TTTATT TTATTG TATTGA ATTGAA TTGAAG TGAAGA GAAGAC AAGACT AGACTT GACTTA ACTTAT CTTATG TTATGT TATGTG ATGTGC TGTGCA GTGCAA TGCAAG GCAAGG CAAGGC AAGGCA AGGCAC GGCACA GCACAA CACAAA ACAAAG CAAAGG AAAGGG AAGGGA AGGGAG GGGAGC GGAGCT GAGCTC AGCTCC GCTCCA CTCCAG TCCAGG CCAGGA CAGGAC AGGACT GGACTG GACTGA ACTGAG CTGAGA TGAGAT GAGATA AGATAT GATATT ATATTT TATTTT ATTTTT TTTTTA TTTTAC TTTACT TTACTA TACTAT ACTATA CTATAC TATACC ATACCT TACCTT ACCTTC CCTTCT CTTCTC TTCTCT TCTCTA CTCTAT TCTATC CTATCA TATCAT ATCATC TCATCT CATCTT ATCTTG TCTTGC CTTGCA TTGCAC TGCACC GCACCC CACCCC ACCCCC CCCCCA CCCCAA CCCAAA CCAAAA CAAAAT AAAATA AAATAG AATAGC ATAGCT TAGCTT AGCTTC GCTTCC CTTCCA TTCCAG TCCAGG CCAGGG CAGGGC AGGGCA GGGCAC GGCACT GCACTT CACTTC ACTTCT CTTCTT TTCTTT TCTTTC CTTTCT TTTCTA TTCTAT TCTATT CTATTT TATTTG ATTTGT TTTGTT TTGTTT TGTTTT GTTTTT TTTTTG TTTTGT TTTGTG TTGTGG TGTGGA GTGGAA TGGAAA GGAAAG GAAAGA AAAGAC AAGACT AGACTG GACTGG ACTGGC CTGGCA TGGCAA GGCAAT GCAATT CAATTA AATTAG ATTAGA TTAGAG TAGAGG AGAGGT GAGGTA AGGTAG GGTAGA GTAGAA TAGAAA AGAAAA GAAAAG AAAAGT AAAGTG AAGTGA AGTGAA GTGAAA TGAAAT GAAATA AAATAA AATAAA ATAAAT TAAATG AAATGG AATGGA ATGGAA TGGAAA GGAAAT GAAATA AAATAG AATAGT ATAGTA TAGTAC AGTACT GTACTA TACTAC ACTACT CTACTC TACTCA ACTCAG CTCAGG TCAGGA CAGGAC AGGACT GGACTG GACTGT ACTGTC CTGTCA TGTCAC GTCACA TCACAT CACATC ACATCT CATCTA ATCTAC TCTACA CTACAT TACATC ACATCT CATCTG ATCTGT TCTGTG CTGTGT TGTGTT GTGTTT TGTTTT GTTTTT TTTTTG TTTTGC TTTGCA TTGCAG TGCAGT GCAGTG CAGTGC AGTGCC GTGCCA TGCCAA GCCAAT CCAATT CAATTT AATTTG ATTTGC TTTGCA TTGCAT TGCATT GCATTT CATTTT ATTTTC TTTTCT TTTCTG TTCTGA TCTGAG CTGAGT TGAGTG GAGTGA AGTGAG GTGAGT TGAGTT GAGTTA AGTTAC GTTACT TTACTT TACTTC ACTTCT CTTCTA TTCTAC TCTACT CTACTC TACTCA ACTCAC CTCACC TCACCT CACCTT ACCTTC CCTTCA CTTCAC TTCACA TCACAG CACAGC ACAGCA CAGCAG AGCAGC GCAGCC CAGCCG AGCCGG GCCGGT CCGGTA CGGTAC GGTACC GTACCG TACCGC ACCGCA CCGCAG CGCAGT GCAGTG CAGTGC AGTGCC GTGCCT TGCCTT GCCTTG CCTTGC CTTGCA TTGCAT TGCATA GCATAT CATATA ATATAT TATATT ATATTA TATTAT ATTATA TTATAT TATATC ATATCC TATCCT ATCCTC TCCTCA CCTCAA CTCAAT TCAATG CAATGA AATGAG ATGAGT TGAGTA GAGTAC AGTACT GTACTT TACTTG ACTTGT CTTGTC TTGTCA TGTCAA GTCAAT TCAATT CAATTG AATTGA ATTGAT TTGATT TGATTT GATTTT ATTTTG TTTTGT TTTGTA TTGTAC TGTACA GTACAT TACATG ACATGC CATGCG ATGCGT TGCGTG GCGTGT CGTGTG GTGTGA TGTGAC GTGACA TGACAG GACAGT ACAGTA CAGTAT AGTATA GTATAA TATAAA ATAAAT TAAATA AAATAT AATATA ATATAT TATATT ATATTA TATTAT ATTATG TTATGA TATGAA ATGAAA TGAAAA GAAAAA AAAAAT AAAATG AAATGA AATGAG ATGAGG TGAGGA GAGGAG AGGAGG GGAGGC GAGGCC AGGCCA GGCCAG GCCAGG CCAGGC CAGGCA AGGCAA GGCAAT GCAATA CAATAA AATAAA ATAAAA TAAAAG AAAAGA AAAGAG AAGAGT AGAGTC GAGTCA AGTCAG GTCAGG TCAGGA CAGGAT AGGATT GGATTT GATTTC ATTTCT TTTCTT TTCTTC TCTTCC CTTCCA TTCCAA TCCAAA CCAAAA CAAAAA AAAAAA AAAAAA AAAAAA AAAAAT AAAATA AAATAC AATACA ATACAC TACACA ACACAG CACAGC ACAGCG CAGCGG AGCGGT GCGGTG CGGTGG GGTGGA GTGGAG TGGAGC GGAGCT GAGCTT AGCTTG GCTTGG CTTGGC TTGGCA TGGCAT GGCATA GCATAA CATAAA ATAAAG TAAAGT AAAGTT AAGTTC AGTTCA GTTCAA TTCAAA TCAAAT CAAATG AAATGC AATGCT ATGCTC TGCTCC GCTCCT CTCCTA TCCTAC CCTACA CTACAC TACACC ACACCC CACCCT ACCCTG CCCTGC CCTGCC CTGCCC TGCCCT GCCCTG CCCTGC CCTGCA CTGCAG TGCAGT GCAGTA CAGTAT AGTATC GTATCT TATCTC ATCTCT TCTCTA CTCTAA TCTAAC CTAACC TAACCA AACCAG ACCAGG CCAGGG CAGGGG AGGGGA GGGGAC GGGACT GGACTT GACTTT ACTTTG CTTTGA TTTGAT TTGATA TGATAA GATAAG ATAAGG TAAGGA AAGGAA AGGAAG GGAAGC GAAGCT AAGCTG AGCTGA GCTGAA CTGAAG TGAAGG GAAGGG AAGGGT AGGGTG GGGTGA GGTGAT GTGATA TGATAT GATATT ATATTA TATTAC ATTACC TTACCT TACCTT ACCTTT CCTTTG CTTTGC TTTGCT TTGCTC TGCTCC GCTCCC CTCCCT TCCCTC CCCTCA CCTCAC CTCACT TCACTG CACTGC ACTGCA CTGCAA TGCAAC GCAACT CAACTG AACTGA ACTGAA CTGAAC TGAACA GAACAC AACACA ACACAT CACATT ACATTT CATTTC ATTTCT TTTCTT TTCTTA TCTTAG CTTAGT TTAGTT TAGTTT AGTTTT GTTTTT TTTTTA TTTTAG TTTAGG TTAGGT TAGGTG AGGTGG GGTGGC GTGGCC TGGCCC GGCCCC GCCCCC CCCCCG CCCCGC CCCGCT CCGCTG CGCTGG GCTGGC CTGGCT TGGCTA GGCTAA GCTAAC CTAACT TAACTT AACTTG ACTTGC CTTGCT TTGCTG TGCTGT GCTGTG CTGTGG TGTGGA GTGGAG TGGAGT GGAGTT GAGTTT AGTTTT GTTTTC TTTTCA TTTCAA TTCAAG TCAAGG CAAGGG AAGGGC AGGGCA GGGCAT GGCATA GCATAG CATAGA ATAGAA TAGAAT AGAATC GAATCG AATCGT ATCGTC TCGTCC CGTCCT GTCCTT TCCTTT CCTTTA CTTTAC TTTACA TTACAC TACACA ACACAA CACAAT ACAATT CAATTA AATTAA ATTAAA TTAAAA TAAAAG AAAAGA AAAGAA AAGAAG AGAAGA GAAGAT AAGATG AGATGC GATGCT ATGCTG TGCTGT GCTGTT CTGTTT TGTTTA GTTTAA TTTAAT TTAATC TAATCT AATCTG ATCTGA TCTGAG CTGAGG TGAGGA GAGGAT AGGATC GGATCC GATCCT ATCCTG TCCTGT CCTGTT CTGTTA TGTTAA GTTAAA TTAAAC TAAACA AAACAA AACAAT ACAATG CAATGC AATGCA ATGCAG TGCAGC GCAGCT CAGCTT AGCTTT GCTTTT CTTTTA TTTTAG TTTAGA TTAGAA TAGAAA AGAAAT GAAATG AAATGG AATGGT ATGGTC TGGTCA GGTCAC GTCACA TCACAA CACAAC ACAACT CAACTT AACTTC ACTTCA CTTCAT TTCATG TCATGG CATGGT ATGGTT TGGTTC GGTTCG GTTCGA TTCGAA TCGAAA CGAAAT GAAATT AAATTT AATTTT ATTTTC TTTTCG TTTCGG TTCGGT TCGGTA CGGTAA GGTAAG GTAAGT TAAGTG AAGTGA AGTGAT GTGATG TGATGG GATGGT ATGGTC TGGTCA GGTCAG GTCAGA TCAGAG CAGAGA AGAGAC GAGACT AGACTT GACTTG ACTTGG CTTGGG TTGGGT TGGGTT GGGTTT GGTTTG GTTTGA TTTGAT TTGATT TGATTT GATTTA ATTTAG TTTAGG TTAGGA TAGGAA AGGAAT GGAATC GAATCA AATCAT ATCATG TCATGG CATGGT ATGGTG TGGTGA GGTGAT GTGATG TGATGC GATGCA ATGCAT TGCATA GCATAA CATAAA ATAAAA TAAAAC AAAACT AAACTA AACTAT ACTATA CTATAT TATATT ATATTC TATTCT ATTCTG TTCTGC TCTGCA CTGCAG TGCAGT GCAGTA CAGTAA AGTAAG GTAAGG TAAGGC AAGGCC AGGCCT GGCCTC GCCTCT CCTCTT CTCTTT TCTTTC CTTTCT TTTCTG TTCTGC TCTGCA CTGCAG TGCAGA GCAGAA CAGAAT AGAATG GAATGT AATGTA ATGTAG TGTAGT GTAGTG TAGTGC AGTGCC GTGCCA TGCCAC GCCACG CCACGC CACGCT ACGCTC CGCTCT GCTCTG CTCTGC TCTGCT CTGCTT TGCTTT GCTTTA CTTTAC TTTACT TTACTC TACTCT ACTCTT CTCTTA TCTTAT CTTATT TTATTT TATTTG ATTTGA TTTGAG TTGAGA TGAGAC GAGACA AGACAG GACAGC ACAGCT CAGCTG AGCTGC GCTGCC CTGCCT TGCCTC GCCTCT CCTCTA CTCTAA TCTAAT CTAATT TAATTC AATTCC ATTCCA TTCCAG TCCAGC CCAGCA CAGCAA AGCAAA GCAAAG CAAAGC AAAGCT AAGCTT AGCTTT GCTTTC CTTTCA TTTCAT TTCATT TCATTT CATTTC ATTTCT TTTCTC TTCTCA TCTCAG CTCAGT TCAGTC CAGTCC AGTCCT GTCCTT TCCTTC CCTTCT CTTCTG TTCTGT TCTGTA CTGTAA TGTAAT GTAATC TAATCA AATCAG ATCAGA TCAGAT CAGATT AGATTT GATTTC ATTTCA TTTCAC TTCACC TCACCG CACCGT ACCGTG CCGTGT CGTGTG GTGTGC TGTGCT GTGCTG TGCTGT GCTGTA CTGTAG TGTAGG GTAGGG TAGGGG AGGGGA GGGGAA GGGAAG GGAAGC GAAGCC AAGCCA AGCCAC GCCACC CCACCC CACCCA ACCCAT CCCATG CCATGG CATGGC ATGGCA TGGCAG GGCAGG GCAGGT CAGGTA AGGTAT GGTATA GTATAA TATAAC ATAACA TAACAG AACAGA ACAGAC CAGACT AGACTA GACTAA ACTAAA CTAAAC TAAACG AAACGT AACGTT ACGTTC CGTTCT GTTCTT TTCTTG TCTTGA CTTGAC TTGACA TGACAT GACATC ACATCT CATCTT ATCTTT TCTTTC CTTTCG TTTCGT TTCGTT TCGTTT CGTTTG GTTTGT TTTGTG TTGTGT TGTGTA GTGTAC TGTACA GTACAT TACATT ACATTC CATTCT ATTCTA TTCTAA TCTAAA CTAAAC TAAACG AAACGA AACGAG ACGAGC CGAGCA GAGCAA AGCAAG GCAAGT CAAGTG AAGTGG AGTGGC GTGGCT TGGCTG GGCTGA GCTGAA CTGAAG TGAAGG GAAGGA AAGGAA AGGAAA GGAAAT GAAATT AAATTA AATTAG ATTAGG TTAGGG TAGGGG AGGGGA GGGGAA GGGAAG GGAAGT GAAGTA AAGTAA AGTAAT GTAATT TAATTT AATTTA ATTTAC TTTACA TTACAC TACACA ACACAG CACAGG ACAGGG CAGGGC AGGGCC GGGCCT GGCCTT GCCTTC CCTTCA CTTCAG TTCAGC TCAGCT CAGCTT AGCTTA GCTTAT CTTATA TTATAT TATATT ATATTT TATTTG ATTTGG TTTGGG TTGGGC TGGGCT")
x = read.csv("C:/Users/Pallu/Downloads/TspTrans_liver.csv")
View(x)
x[1, ]
x[1, ]$kmer
str_count(x[1, ]$kmer, pattern = " ")
library(stringr)
str_count(x[1, ]$kmer, pattern = " ")
str_count(x[2, ]$kmer, pattern = " ")
str_count(x[5, ]$kmer, pattern = " ")
15897575-15900074
ft = "Z:"
res_path =paste0(ft, "/projects/Davuluri_lab/2_Tissue-specific-July-2022/subsample/manuscript/")
save_pth_dna = paste0(ft, "/projects/Davuluri_lab/2_Tissue-specific-July-2022/subsample/ENCODE_DNABERT/")
save_pth_dna
# trial
try_fa = read.csv(paste0(save_pth_dna, "fasta/TspTrans_liver.csv"))
View(try_fa)
length(try_fa$sequence[1, ])
length(try_fa$sequence[1])
try_fa[1, ]$sequence
try_fa[1, ]$sequence %>% length
try_fa[1, ]$sequence %>% nchar()
seq2kmer <- function(seq, k) {
n <- nchar(seq)
sapply(0:(n-k), function(x) substr(seq, x + 1, x + k)) %>%
paste(collapse = " ")
}
try_fa = try_fa %>% head
# Transform sequence to kmer and update the data frame
df <- df %>%
rowwise() %>%
mutate(kmer = seq2kmer(sequence, k)) %>%
dplyr::select(-sequence) %>%
mutate(label = exp)
pacman::p_load(data.table, stringr, dplyr,readxl, feather, biomaRt, tidyverse, openxlsx, ggplot2, VennDiagram, janitor, gridExtra)
library(Biostrings)
# Transform sequence to kmer and update the data frame
df <- df %>%
rowwise() %>%
mutate(kmer = seq2kmer(sequence, k)) %>%
dplyr::select(-sequence) %>%
mutate(label = exp)
seq2kmer <- function(seq, k) {
n <- nchar(seq)
sapply(0:(n-k), function(x) substr(seq, x + 1, x + k)) %>%
paste(collapse = " ")
}
df=try_fa
# Transform sequence to kmer and update the data frame
df <- df %>%
rowwise() %>%
mutate(kmer = seq2kmer(sequence, k)) %>%
dplyr::select(-sequence) %>%
mutate(label = exp)
k=6
exp=1
# Transform sequence to kmer and update the data frame
df <- df %>%
rowwise() %>%
mutate(kmer = seq2kmer(sequence, k)) %>%
dplyr::select(-sequence) %>%
mutate(label = exp)
View(df)
str_count(df[1, ]$kmer, pattern = " ")
seq2kmer <- function(seq, k) {
n <- nchar(seq)
sapply(1:(n-k+1), function(x) substr(seq, x, x + k - 1)) %>%
paste(collapse = " ")
}
# Transform sequence to kmer and update the data frame
df <- df %>%
rowwise() %>%
mutate(kmer = seq2kmer(sequence, k)) %>%
dplyr::select(-sequence) %>%
mutate(label = exp)
df=try_fa
# Transform sequence to kmer and update the data frame
df <- df %>%
rowwise() %>%
mutate(kmer = seq2kmer(sequence, k)) %>%
dplyr::select(-sequence) %>%
mutate(label = exp)
str_count(df[1, ]$kmer, pattern = " ")
seq=df[1, ]$kmer
seq
seq %>% length
seq=try_fa[1, ]$kmer
seq
seq=try_fa[1, ]$sequence
seq
seq %>% length
seq %>% nchar
n <- nchar(seq)
n
n-k+1
sapply(1:n, function(x) substr(seq, x, x + k - 1)) %>%
paste(collapse = " ")
x1 =     sapply(1:n, function(x) substr(seq, x, x + k - 1)) %>%
paste(collapse = " ")
x
x2
x1
str_count(x1, pattern = " ")
seq2kmer <- function(seq, k) {
n <- nchar(seq)
sapply(1:(n-k+1), function(x) substr(seq, x, x + k - 1)) %>%
paste(collapse = " ")
}
df=try_fa
# Transform sequence to kmer and update the data frame
df <- df %>%
rowwise() %>%
mutate(kmer = seq2kmer(sequence, k)) %>%
dplyr::select(-sequence) %>%
mutate(label = exp)
str_count(x1, pattern = " ")
str_count(df[1, ]$kmer, pattern = " ")
df[1, ]$kmer
get_kmer_sequence <- function(original_string, kmer=6) {
if (kmer == -1) {
return(original_string)
}
# Remove newline characters from the original string
original_string <- gsub("\n", "", original_string)
# Initialize an empty vector to store the k-mers
sequence <- vector(mode = "character", length = nchar(original_string) - kmer + 1)
# Loop through the string and extract k-mers
for (i in 1:(nchar(original_string) - kmer + 1)) {
sequence[i] <- substr(original_string, i, i + kmer - 1)
}
return(sequence)
}
get_kmer_sequence(try_fa[1, ]$sequence, kmer=6) -> try
try
try %>% length
df %>% head
df$kmer[1]
str_count(df[1, ]$kmer, pattern = " ")
try %>% length
str_count(df[1, ]$kmer, pattern = " ")
fetch_data <- function(gene_nms, page_limit = Inf, COSMIC_query) {
all_data <- data.frame()
for (gene in gene_nms) {
COSMIC_query$terms <- gene
COSMIC_query$page_size <- 500
page <- 1
while (TRUE) {
if (page > page_limit) {
break
}
COSMIC_query$page <- page
response <- GET('https://clinicaltables.nlm.nih.gov/api/cosmic/v4/search', query = COSMIC_query)
data <- content(response, as = "text") %>% fromJSON()
data.df <- data[[4]] %>% as.data.frame()
if (nrow(data.df) == 0) {
break
}
colnames(data.df) <- strsplit(COSMIC_query$df, ",")[[1]]
all_data <- rbind(all_data, data.df)
page <- page + 1
}
}
return(all_data)
}
##----------------------------------------------------------------------------------------------------------------------------------
##----------------------------------------------------------------------------------------------------------------------------------
#-Idea of the shiny app
#-1. Give the user options to choose cell type of interest
#-2. Choose a species
#-3. User sees a list of marker genes of that cell type of interest in table from panglaoDB
#-4. fetch mutations landscape for marker genes and summary plot or table
##----------------------------------------------------------------------------------------------------------------------------------
##----------------------------------------------------------------------------------------------------------------------------------
pacman::p_load(httr, jsonlite, dplyr, data.table, furrr, future, shiny, shinydashboard, DT, tidyr, janitor, scales, ggplot2, plotly)
##----------------------------------------------------------------------------------------------------------------------------------
##----------------------------------------------------------------------------------------------------------------------------------
panglaoDB_csv = fread("data/PanglaoDB_markers_27_Mar_2020.tsv")
##----------------------------------------------------------------------------------------------------------------------------------
##----------------------------------------------------------------------------------------------------------------------------------
#-Idea of the shiny app
#-1. Give the user options to choose cell type of interest
#-2. Choose a species
#-3. User sees a list of marker genes of that cell type of interest in table from panglaoDB
#-4. fetch mutations landscape for marker genes and summary plot or table
##----------------------------------------------------------------------------------------------------------------------------------
##----------------------------------------------------------------------------------------------------------------------------------
pacman::p_load(httr, jsonlite, dplyr, data.table, shiny, shinydashboard, DT, tidyr, janitor, scales, ggplot2, plotly)
##----------------------------------------------------------------------------------------------------------------------------------
##----------------------------------------------------------------------------------------------------------------------------------
panglaoDB_csv = fread("data/PanglaoDB_markers_27_Mar_2020.tsv")
getwd()
ls
rm(list=ls())
##--------------------------------------------------------------------------------------------------------------
# Call the main function
result <- run_analysis()
##-Source the UI and Server scripts
source("ui.R")
##-Source the UI and Server scripts
source("ui.R")
setwd("C:/Users/Pallu/Documents/GitHub/Ct-Mark-Mut/app_V3/")
##-Source the UI and Server scripts
source("ui.R")
source("server.R")
##-Run the app with the sourced UI and Server
shinyApp(ui = ui, server = server)
##-Source the UI and Server scripts
source("ui.R")
source("server.R")
##-Run the app with the sourced UI and Server
shinyApp(ui = ui, server = server)
library(pheatmap)
install.packages("pheatmap")
pacman::p_load(httr, jsonlite, dplyr, readr, curl, data.table, shiny, DT, tidyr, janitor, scales, ggplot2, pheatmap, plotly)
